-- ================================================================= --
--         Stickman TD - Failsafe Automatic Player v3                --
-- ================================================================= --

task.wait(1) -- Oyunun tamamen yüklenmesi için güvenli bekleme

-- ================================================================= --
--                             GUI CODE (ÖNCELİKLİ)                    --
-- ================================================================= --

local ScreenGui = Instance.new("ScreenGui"); ScreenGui.Name = "StickmanTD_GUI"; ScreenGui.Parent = CoreGui; ScreenGui.ResetOnSpawn = false
local MainFrame = Instance.new("Frame"); MainFrame.Name = "MainFrame"; MainFrame.Size = UDim2.new(0, 280, 0, 220); MainFrame.Position = UDim2.new(0.5, -140, 0.5, -110); MainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45); MainFrame.BorderSizePixel = 0; MainFrame.Active = true; MainFrame.Draggable = true; MainFrame.Parent = ScreenGui
local UICorner = Instance.new("UICorner"); UICorner.CornerRadius = UDim.new(0, 8); UICorner.Parent = MainFrame
local TitleBar = Instance.new("Frame"); TitleBar.Name = "TitleBar"; TitleBar.Size = UDim2.new(1, 0, 0, 30); TitleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 35); TitleBar.BorderSizePixel = 0; TitleBar.ZIndex = 2; TitleBar.Parent = MainFrame
local TitleCorner = Instance.new("UICorner"); TitleCorner.CornerRadius = UDim.new(0, 8); TitleCorner.Parent = TitleBar
local TitleLabel = Instance.new("TextLabel"); TitleLabel.Name = "TitleLabel"; TitleLabel.Size = UDim2.new(1, -35, 1, 0); TitleLabel.Text = "Stickman TD Player"; TitleLabel.Font = Enum.Font.SourceSansBold; TitleLabel.TextSize = 16; TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255); TitleLabel.BackgroundTransparency = 1; TitleLabel.TextXAlignment = Enum.TextXAlignment.Left; TitleLabel.Position = UDim2.new(0, 10, 0, 0); TitleLabel.ZIndex = 2; TitleLabel.Parent = TitleBar
local MinimizeButton = Instance.new("TextButton"); MinimizeButton.Name = "MinimizeButton"; MinimizeButton.Size = UDim2.new(0, 30, 1, 0); MinimizeButton.Position = UDim2.new(1, -30, 0, 0); MinimizeButton.Text = "–"; MinimizeButton.Font = Enum.Font.SourceSansBold; MinimizeButton.TextSize = 24; MinimizeButton.TextColor3 = Color3.fromRGB(200, 200, 200); MinimizeButton.BackgroundTransparency = 1; MinimizeButton.ZIndex = 2; MinimizeButton.Parent = TitleBar
local DropdownFrame = Instance.new("Frame"); DropdownFrame.Name = "DropdownFrame"; DropdownFrame.Size = UDim2.new(0, 240, 0, 35); DropdownFrame.Position = UDim2.new(0.5, -120, 0, 50); DropdownFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 60); DropdownFrame.BorderSizePixel = 1; DropdownFrame.BorderColor3 = Color3.fromRGB(80, 80, 90); DropdownFrame.ZIndex = 2; DropdownFrame.Parent = MainFrame
local DropdownCorner = Instance.new("UICorner"); DropdownCorner.CornerRadius = UDim.new(0, 6); DropdownCorner.Parent = DropdownFrame
local DropdownLabel = Instance.new("TextLabel"); DropdownLabel.Name = "DropdownLabel"; DropdownLabel.Size = UDim2.new(1, -30, 1, 0); DropdownLabel.Text = "Select Macro..."; DropdownLabel.Font = Enum.Font.SourceSans; DropdownLabel.TextSize = 16; DropdownLabel.TextColor3 = Color3.fromRGB(220, 220, 220); DropdownLabel.BackgroundTransparency = 1; DropdownLabel.Position = UDim2.new(0, 10, 0, 0); DropdownLabel.ZIndex = 2; DropdownLabel.Parent = DropdownFrame
local DropdownButton = Instance.new("TextButton"); DropdownButton.Name = "DropdownButton"; DropdownButton.Size = UDim2.new(1, 0, 1, 0); DropdownButton.Text = ""; DropdownButton.BackgroundTransparency = 1; DropdownButton.ZIndex = 3; DropdownButton.Parent = DropdownFrame
local DropdownArrow = Instance.new("TextLabel"); DropdownArrow.Size = UDim2.new(0, 30, 1, 0); DropdownArrow.Position = UDim2.new(1, -30, 0, 0); DropdownArrow.Text = "▼"; DropdownArrow.Font = Enum.Font.SourceSans; DropdownArrow.TextSize = 16; DropdownArrow.TextColor3 = Color3.fromRGB(220, 220, 220); DropdownArrow.BackgroundTransparency = 1; DropdownArrow.ZIndex = 2; DropdownArrow.Parent = DropdownFrame
local OptionsList = Instance.new("ScrollingFrame"); OptionsList.Name = "OptionsList"; OptionsList.Size = UDim2.new(0, 240, 0, 0); OptionsList.Position = UDim2.new(0.5, -120, 0, 85); OptionsList.BackgroundColor3 = Color3.fromRGB(50, 50, 60); OptionsList.BorderSizePixel = 1; OptionsList.BorderColor3 = Color3.fromRGB(80, 80, 90); OptionsList.BackgroundTransparency = 0.1; OptionsList.Visible = false; OptionsList.ZIndex = 4; OptionsList.Parent = MainFrame
local UIListLayout = Instance.new("UIListLayout"); UIListLayout.Padding = UDim.new(0, 2); UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder; UIListLayout.Parent = OptionsList
local DifficultyLabel = Instance.new("TextLabel"); DifficultyLabel.Name = "DifficultyLabel"; DifficultyLabel.Size = UDim2.new(0, 100, 0, 35); DifficultyLabel.Position = UDim2.new(0.5, -120, 0, 110); DifficultyLabel.Text = "Difficulty (1-7):"; DifficultyLabel.Font = Enum.Font.SourceSans; DifficultyLabel.TextSize = 16; DifficultyLabel.TextColor3 = Color3.fromRGB(220, 220, 220); DifficultyLabel.BackgroundTransparency = 1; DifficultyLabel.TextXAlignment = Enum.TextXAlignment.Left; DifficultyLabel.ZIndex = 2; DifficultyLabel.Parent = MainFrame
local DifficultyInput = Instance.new("TextBox"); DifficultyInput.Name = "DifficultyInput"; DifficultyInput.Size = UDim2.new(0, 110, 0, 35); DifficultyInput.Position = UDim2.new(0.5, 10, 0, 110); DifficultyInput.Font = Enum.Font.SourceSansBold; DifficultyInput.Text = "1"; DifficultyInput.TextColor3 = Color3.fromRGB(10, 10, 10); DifficultyInput.BackgroundColor3 = Color3.fromRGB(180, 180, 180); DifficultyInput.ZIndex = 2; DifficultyInput.Parent = MainFrame
local DiffInputCorner = Instance.new("UICorner"); DiffInputCorner.CornerRadius = UDim.new(0, 6); DiffInputCorner.Parent = DifficultyInput
local ToggleButton = Instance.new("TextButton"); ToggleButton.Name = "ToggleButton"; ToggleButton.Size = UDim2.new(0, 240, 0, 45); ToggleButton.Position = UDim2.new(0.5, -120, 0, 160); ToggleButton.Text = "OFF"; ToggleButton.Font = Enum.Font.SourceSansBold; ToggleButton.TextSize = 20; ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255); ToggleButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50); ToggleButton.ZIndex = 1; ToggleButton.Parent = MainFrame
local ToggleCorner = Instance.new("UICorner"); ToggleCorner.CornerRadius = UDim.new(0, 6); ToggleCorner.Parent = ToggleButton
local MinimizedButton = Instance.new("TextButton"); MinimizedButton.Name = "MinimizedButton"; MinimizedButton.Size = UDim2.new(0, 60, 0, 35); MinimizedButton.Position = UDim2.new(0, 20, 0.5, 0); MinimizedButton.Text = "MACRO"; MinimizedButton.Font = Enum.Font.SourceSansBold; MinimizedButton.TextSize = 18; MinimizedButton.TextColor3 = Color3.fromRGB(255, 255, 255); MinimizedButton.BackgroundColor3 = Color3.fromRGB(50, 50, 60); MinimizedButton.BackgroundTransparency = 0.3; MinimizedButton.Draggable = true; MinimizedButton.Active = true; MinimizedButton.Visible = false; MinimizedButton.ZIndex = 5; MinimizedButton.Parent = ScreenGui
local MinimizedCorner = Instance.new("UICorner"); MinimizedCorner.CornerRadius = UDim.new(0, 8); MinimizedCorner.Parent = MinimizedButton

-- Roblox Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")

-- RemoteFunctions
local RF_ClientRequestServer = ReplicatedStorage.RemoteFunction:WaitForChild("clientRequestServer")
local RF_Voting = ReplicatedStorage.RemoteFunction:WaitForChild("RemoteFunction_Voting")

-- ================================================================= --
--                          MACRO LIST                               --
-- ================================================================= --

local Macros = {
    ["Fully Automatic Farm"] = function(difficulty)
        local isMacroRunning = true
        local initialUnitsPlaced = false
        local UPGRADE_PHASE_DURATION = 75 
        local BATTLE_PHASE_DURATION = 120  

        while isMacroRunning do
            if not initialUnitsPlaced and #Workspace.PlaceHero:GetChildren() < 5 then
                print("Phase 1: Placing initial units...")
                RF_ClientRequestServer:InvokeServer(200007,{2191,CFrame.new(-21, 1, -1, 1, 0, 0, 0, 1, 0, 0, 0, 1),1,Vector3.new(-21, 1, -1)}); task.wait(1)
                RF_ClientRequestServer:InvokeServer(200007,{1071,CFrame.new(-43, 1, -36, 1, 0, 0, 0, 1, 0, 0, 0, 1),3,Vector3.new(-43, 1, -36)}); task.wait(1)
                RF_ClientRequestServer:InvokeServer(200007,{2191,CFrame.new(-7, 1, -29, 1, 0, 0, 0, 1, 0, 0, 0, 1),1,Vector3.new(-7, 1, -29)}); task.wait(1)
                RF_ClientRequestServer:InvokeServer(200007,{1321,CFrame.new(-27, 1, -11, 1, 0, 0, 0, 1, 0, 0, 0, 1),2,Vector3.new(-27, 1, -11)}); task.wait(1)
                RF_ClientRequestServer:InvokeServer(200007,{1321,CFrame.new(-19, 1, -29, 1, 0, 0, 0, 1, 0, 0, 0, 1),2,Vector3.new(-19, 1, -29)}); task.wait(1)
                initialUnitsPlaced = true
            end

            print("Phase 2: Starting Flawless Upgrade Cycle...")
            local upgradePhaseEndTime = tick() + UPGRADE_PHASE_DURATION
            
            while tick() < upgradePhaseEndTime and isMacroRunning do
                local placeHeroFolder = Workspace:FindFirstChild("PlaceHero")
                if placeHeroFolder then
                    for i, unitDataHolder in ipairs(placeHeroFolder:GetChildren()) do
                        local heroData = unitDataHolder:FindFirstChild("#HeroData")
                        local dataValue = heroData and heroData:FindFirstChild("Value")
                        if dataValue and dataValue.Value ~= "" then
                            local success, data = pcall(HttpService.JSONDecode, HttpService, dataValue.Value)
                            if success and data and data.SelectHeroName and data.id then
                                RF_ClientRequestServer:InvokeServer(200009, {data.SelectHeroName, tonumber(data.id) + 1})
                                task.wait(0.1)
                            end
                        end
                    end
                end
                task.wait(1) 
            end
            
            if not isMacroRunning then break end

            print("Phase 3: Selecting Difficulty '"..difficulty.."'...")
            RF_Voting:InvokeServer("DifficultyVoting", difficulty)
            
            print("Phase 4: Battle...")
            task.wait(BATTLE_PHASE_DURATION)
            
            if not isMacroRunning then break end

            print("Phase 5: Restarting match...")
            RF_ClientRequestServer:InvokeServer(8, {"SkipWave", "OFF"})
            task.wait(5)
        end
    end,
}
-- ================================================================= --
--                          GUI FUNCTIONS                          --
-- ================================================================= --

local selectedMacroName = nil
local isMacroRunning = false
local currentMacroThread = nil

local isDropdownOpen = false
function ToggleDropdown()
    isDropdownOpen = not isDropdownOpen
    OptionsList.Visible = isDropdownOpen
    DropdownArrow.Text = isDropdownOpen and "▲" or "▼"
    if isDropdownOpen then
        local numOptions = #OptionsList:GetChildren() - 1
        local height = numOptions * 32
        OptionsList.Size = UDim2.new(0, 240, 0, math.min(height, 96))
        OptionsList.CanvasSize = UDim2.new(0,0,0,height)
    else
        OptionsList.Size = UDim2.new(0, 240, 0, 0)
    end
end

for macroName, _ in pairs(Macros) do
    local optionButton = Instance.new("TextButton")
    optionButton.Name = macroName; optionButton.Size = UDim2.new(1, -4, 0, 30); optionButton.Text = macroName; optionButton.Font = Enum.Font.SourceSans; optionButton.TextSize = 15; optionButton.TextColor3 = Color3.fromRGB(200, 200, 200); optionButton.BackgroundTransparency = 1; optionButton.ZIndex = 5; optionButton.Parent = OptionsList
    optionButton.MouseButton1Click:Connect(function() selectedMacroName = macroName; DropdownLabel.Text = macroName; ToggleDropdown() end)
end

function ToggleMacro()
    if isMacroRunning then
        if currentMacroThread then task.cancel(currentMacroThread); currentMacroThread = nil end
        isMacroRunning = false
        ToggleButton.Text = "OFF"; ToggleButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    else
        if selectedMacroName and Macros[selectedMacroName] then
            local difficulty = math.clamp(tonumber(DifficultyInput.Text) or 1, 1, 7)
            DifficultyInput.Text = tostring(difficulty)
            
            isMacroRunning = true
            ToggleButton.Text = "ON"; ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
            currentMacroThread = task.spawn(function()
                local success, err = pcall(Macros[selectedMacroName], difficulty)
                if not success then
                    warn("Error while running macro:", err)
                    isMacroRunning = false
                    ToggleButton.Text = "ERROR!"; ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 150, 0)
                end
            end)
        else
            ToggleButton.Text = "SELECT MACRO!"
            task.wait(1)
            if not isMacroRunning then ToggleButton.Text = "OFF" end
        end
    end
end

function ToggleMinimize()
    local isVisible = MainFrame.Visible
    MainFrame.Visible = not isVisible
    MinimizedButton.Visible = isVisible
end

DropdownButton.MouseButton1Click:Connect(ToggleDropdown)
ToggleButton.MouseButton1Click:Connect(ToggleMacro)
MinimizeButton.MouseButton1Click:Connect(ToggleMinimize)
MinimizedButton.MouseButton1Click:Connect(ToggleMinimize)

print("Stickman TD Final Player (Failsafe) loaded successfully.")
